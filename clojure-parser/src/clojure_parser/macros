(defmacro defn [func-name args body]
  `(def ~func-name (fn ~args ~body)))

(defmacro add [x y]
  `(+ ~x ~y))

(defmacro pipe [arg fa fb fc]
  `(~fc (~fb (~fa ~arg))))

(defmacro null? [arg]
  `(= ~arg null))

(defmacro true? [arg]
  `(= ~arg true))

(defmacro false? [arg]
  `(= ~arg false))

(defmacro empty? [coll]
  `(not (seq ~coll)))

(defmacro gte [x y]
  `(or (> ~x ~y) (= ~x ~y)))

(defmacro lte [x y]
  `(or (< ~x ~y) (= ~x ~y)))